function [ moveList,inCell ] = parsehomeprint( inFileName )
% PARSEHOMEPRINT Parse text files generated with HomePrint to create
% toolpaths for AT40GW.

%{
   [ moveList,inCell ] = parsehomeprint( inFileName )
   Julian Leland, MIT Media Lab, 2016-06-08
    This function parses files generated by HomePrint into a format that
    can be used by gentraj and other trajectory generation programs. It is
    written to work with a version of HomePrint that was current as of
    March 2016, which had a known bug where it would fail to introduce a
    space between the 'X' command letter and the command value after a DIO
    command was issued. Subsequent versions of HomePrint may be
    incompatible if this has been fixed, although changes required here
    should be minimal.
%}

%%
moveList = []; % Set up empty vector to add moves to. Vector should be n x 5.
posList = []; % Set up empty vector to hold current positions (used later to calculate relative position moves).
xMove = 0;
yMove = 0;
zMove = 0;
curVel = 0;
curD_IO = 0;
delay = 0;

abs = 1; % Set abs = 0 so that we treat all moves as absolute. JointCmdGenerator will take care of abs. vs relative moves
scale = 1; % Don't scale input
vel = 0; % Dummy variable - we ignore velocity in this code

%%
fprintf('Input file: %s\n',inFileName);
inFile = fopen(inFileName,'r'); % Open file for reading
inCell = textscan(inFile, '%s','Delimiter','\n'); % Read file lines into cell
fclose(inFile);
moveList(1,:) = [0,0,0,0,0,0,0];
posList(1,:) = [0,0,0]; % Zero vector of X, Y and Z positions

% Parse through lines to find moves/DIO chgs/delays
i = 1;
for j = 1:length(inCell{1})
    % Three cases to consider: starts with X, starts with $ or starts with
    % W
    % disp(i);
    if (strcmp(inCell{1}{j}(1),'X')) == 1
        % We have a move line. Parse to find move distances
        temp = textscan(inCell{1}{j},'%s'); % Scan text file & break into strings
        % Code to deal with bug where no space between X and move after DIO
        % command. Comment out when bug is fixed.
        if length(temp{1}) == 5
            X_temp = textscan(temp{1}{1},'%s','Delimiter',{',','X'});
            temp{1} = {temp{1}{1},X_temp{1}{2},temp{1}{2:5}};
        end
        xPos = scale*str2num(temp{1}{2});
        yPos = scale*str2num(temp{1}{4});
        zPos = scale*str2num(temp{1}{6});
        curVel = vel;
        curD_IO = curD_IO; % We are deliberately not resetting curD_IO - we don't want to turn the DIO off unless specifically told to in the input program
        delay = 0;
        if i == 1
            moveList(i,:) = [1,xPos,yPos,zPos,curVel,curD_IO,delay];
        else
            if abs == 0
                moveList(i,:) = [1,xPos-posList(i-1,1),yPos-posList(i-1,2),zPos-posList(i-1,3),curVel,curD_IO,delay];
            else
                moveList(i,:) = [1,xPos,yPos,zPos,curVel,curD_IO,delay];
            end
        end
        posList(i,:) = [xPos,yPos,zPos];
        i = i + 1;
    end
    if (strcmp(inCell{1}{j}(1),'$')) == 1
        % We have a digital command. Parse to find whether it should be set
        % to true or false
        temp = textscan(inCell{1}{j},'%s');
        xPos = xPos;
        yPos = yPos;
        zPos = zPos;
        curVel = 0;
        if strcmp(temp{1}{3},'TRUE') == 1
            curD_IO = 1;
        else
            curD_IO = 0;
        end
        delay = 0;
        if abs == 0
            moveList(i,:) = [0,xPos-posList(i-1,1),yPos-posList(i-1,2),zPos-posList(i-1,3),curVel,curD_IO,delay];
        else
            moveList(i,:) = [0,xPos,yPos,zPos,curVel,curD_IO,delay];
        end
        posList(i,:) = [xPos,yPos,zPos];
        i = i + 1;
    end
    if (strcmp(inCell{1}{j}(1),'W')) == 1
        % We have a delay line - find delay time.
        temp = textscan(inCell{1}{j},'%s');
        xPos = xPos;
        yPos = yPos;
        zPos = zPos;
        curVel = 0;
        curD_IO = curD_IO;
        delay = str2num(temp{1}{3});
        if abs == 0
            moveList(i,:) = [0,xPos-posList(i-1,1),yPos-posList(i-1,2),zPos-posList(i-1,3),curVel,curD_IO,delay];
        else
            moveList(i,:) = [0,xPos,yPos,zPos,curVel,curD_IO,delay];
        end
        posList(i,:) = [xPos,yPos,zPos];
        i = i + 1;
    end
xMove = 0;
yMove = 0;
zMove = 0;
curVel = 0;
delay = 0;
temp = {};
end
% moveList = moveList(2:length(moveList),:);
inCell{1} = ['---START---';inCell{1}]; 

end

